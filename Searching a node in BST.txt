Searching a node in BST

class Node:
    def __init__(self,x):
        self.data=x
        self.left=None
        self.right=None
    def insert(self,x):
        if self.data==None:
            self.data=x
            return
        if self.data>x:
            if self.left==None:
                self.left=Node(x)
            else:
                self.left.insert(x)
        else:
            if self.right is None:
                self.right=Node(x)
            else:
                self.right.insert(x)
    def show(self):
        if self.left:
            self.left.show()
        print(self.data,end=" ")
        if self.right:
            self.right.show()
    def search(self,x):
        if self.data==x:
            print("Node is found")
            return
        if x<self.data:
            if self.left is not None:
                self.left.search(x)
            else:
                print("Node is not present")
        else:
            if self.right is not None:
                self.right.search(x)
            else:
                print("node is present")
root=Node(40)
while True:
    print()
    print("1.Insert\n2.Show\n3search\n4.Exit")
    ch=int(input("enter your choice"))
    if ch==1:
        x=int(input("enter element"))
        root.insert(x)
    elif ch==2:
        root.show()
    elif ch==3:
        temp=int(input("enter element"))
        root.search(x)
    elif ch==4:
        break
    else:
        print("invalid choice")

Output :

1.Insert
2.Show
3search
4.Exit
enter your choice1
enter element34
1.Insert
2.Show
3search
4.Exit
enter your choice1
enter element54
1.Insert
2.Show
3search
4.Exit
enter your choice1
enter element23
1.Insert
2.Show
3search
4.Exit
enter your choice2
23 34 40 54 
1.Insert
2.Show
3search
4.Exit
enter your choice3
enter element54
Node is found

1.Insert
2.Show
3search
4.Exit
enter your choice
